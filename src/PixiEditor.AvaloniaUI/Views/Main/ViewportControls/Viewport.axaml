<UserControl
    x:Class="PixiEditor.AvaloniaUI.Views.Main.ViewportControls.Viewport"
    x:ClassModifier="internal"
    xmlns="https://github.com/avaloniaui"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:sys="clr-namespace:System;assembly=System.Runtime"
    xmlns:ui="clr-namespace:PixiEditor.Extensions.UI;assembly=PixiEditor.Extensions"
    xmlns:xaml="clr-namespace:PixiEditor.AvaloniaUI.Models.Commands.XAML"
    xmlns:zoombox="clr-namespace:PixiEditor.Zoombox;assembly=PixiEditor.Zoombox"
    xmlns:brushShapeOverlay="clr-namespace:PixiEditor.AvaloniaUI.Views.Overlays.BrushShapeOverlay"
    xmlns:viewModels="clr-namespace:PixiEditor.AvaloniaUI.ViewModels"
    xmlns:symmetryOverlay="clr-namespace:PixiEditor.AvaloniaUI.Views.Overlays.SymmetryOverlay"
    xmlns:lineToolOverlay="clr-namespace:PixiEditor.AvaloniaUI.Views.Overlays.LineToolOverlay"
    xmlns:transformOverlay="clr-namespace:PixiEditor.AvaloniaUI.Views.Overlays.TransformOverlay"
    xmlns:converters="clr-namespace:PixiEditor.AvaloniaUI.Helpers.Converters"
    xmlns:ui1="clr-namespace:PixiEditor.AvaloniaUI.Helpers.UI"
    xmlns:visuals="clr-namespace:PixiEditor.AvaloniaUI.Views.Visuals"
    xmlns:viewportControls="clr-namespace:PixiEditor.AvaloniaUI.Views.Main.ViewportControls"
    xmlns:overlays="clr-namespace:PixiEditor.AvaloniaUI.Views.Overlays"
    xmlns:selectionOverlay="clr-namespace:PixiEditor.AvaloniaUI.Views.Overlays.SelectionOverlay"
    xmlns:renderers="clr-namespace:PixiEditor.AvaloniaUI.Views.Renderers"
    xmlns:generic="clr-namespace:System.Collections.Generic;assembly=System.Runtime"
    mc:Ignorable="d"
    x:Name="vpUc"
    d:DesignHeight="450"
    d:DesignWidth="800">
    <Grid
        x:Name="viewportGrid"
        >
        <Interaction.Behaviors>
            <!--TODO: Implement stylus support-->
            <!--<EventTriggerBehavior EventName="StylusButtonDown">
                <InvokeCommandAction Command="{Binding StylusButtonDownCommand, ElementName=vpUc}"
                                        PassEventArgsToCommand="True"/>
            </EventTriggerBehavior>
            <EventTriggerBehavior EventName="StylusButtonUp">
                <InvokeCommandAction Command="{Binding StylusButtonUpCommand, ElementName=vpUc}"
                                        PassEventArgsToCommand="True"/>
            </EventTriggerBehavior>
            <EventTriggerBehavior EventName="StylusSystemGesture">
                <InvokeCommandAction Command="{Binding StylusGestureCommand, ElementName=vpUc}"
                                        PassEventArgsToCommand="True"/>
            </EventTriggerBehavior>
            <EventTriggerBehavior EventName="StylusOutOfRange">
                <InvokeCommandAction Command="{Binding StylusOutOfRangeCommand, ElementName=vpUc}"
                                        PassEventArgsToCommand="True"/>
            </EventTriggerBehavior>-->
        </Interaction.Behaviors>
        <overlays:TogglableFlyout Margin="5" IconPath="/Images/Settings.png" ui:Translator.TooltipKey="VIEWPORT_SETTINGS"
                               ZIndex="2" HorizontalAlignment="Right" VerticalAlignment="Top">
            <overlays:TogglableFlyout.Child>
                <Border BorderThickness="1" CornerRadius="5" Padding="5" Background="#C8202020" ZIndex="2">
        <StackPanel Orientation="Vertical">
            <StackPanel Orientation="Horizontal">
            <TextBlock Margin="5 0" TextAlignment="Center"
                       Text="{Binding Path=Angle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=viewportControls:Viewport}, 
             Converter={converters:RadiansToDegreesConverter}, StringFormat={}{0}°}"
                       Width="35" Foreground="White" VerticalAlignment="Center" FontSize="16"/>
            <Button Width="32" Height="32" ui:Translator.TooltipKey="RESET_VIEWPORT"
                    Classes="OverlayButton"
                    Click="ResetViewportClicked"
                    Cursor="Hand">
            <Button.Content>
                <Image Width="28" Height="28" Source="/Images/Layout.png"/>
            </Button.Content>
            </Button>
        </StackPanel>
            <Separator/>
            <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
                <ToggleButton Width="32" Height="32" ui:Translator.TooltipKey="TOGGLE_VERTICAL_SYMMETRY"
                        Classes="OverlayToggleButton"
                        IsChecked="{Binding Document.VerticalSymmetryAxisEnabledBindable, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=viewportControls:Viewport}, Mode=TwoWay}"
                        Cursor="Hand">
                    <ToggleButton.Content>
                        <Image Width="28" Height="28" Source="/Images/SymmetryVertical.png"/>
                    </ToggleButton.Content>
                </ToggleButton>
                <ToggleButton Margin="10 0 0 0" Width="32" Height="32" ui:Translator.TooltipKey="TOGGLE_HORIZONTAL_SYMMETRY"
                              Classes="OverlayToggleButton"
                              IsChecked="{Binding Document.HorizontalSymmetryAxisEnabledBindable, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=viewportControls:Viewport}, Mode=TwoWay}"
                              Cursor="Hand">
                    <ToggleButton.Content>
                        <Image Width="28" Height="28" Source="/Images/SymmetryVertical.png">
                            <Image.RenderTransform>
                                <RotateTransform Angle="90"/>
                            </Image.RenderTransform>
                        </Image>
                    </ToggleButton.Content>
                </ToggleButton>
            </StackPanel>
            <Separator/>
            <StackPanel HorizontalAlignment="Right" Orientation="Horizontal">
                <ToggleButton Width="32" Height="32" ui:Translator.TooltipKey="FLIP_VIEWPORT_HORIZONTALLY"
                              Classes="OverlayToggleButton"
                              IsChecked="{Binding FlipX, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=viewportControls:Viewport}, Mode=TwoWay}"
                              Cursor="Hand">
                    <ToggleButton.Content>
                        <Image Width="28" Height="28" Source="/Images/FlipHorizontal.png"/>
                    </ToggleButton.Content>
                </ToggleButton>
                <ToggleButton Margin="10 0 0 0" Width="32" Height="32" ui:Translator.TooltipKey="FLIP_VIEWPORT_VERTICALLY"
                              Classes="OverlayToggleButton"
                              IsChecked="{Binding FlipY, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=viewportControls:Viewport}, Mode=TwoWay}"
                              Cursor="Hand">
                    <ToggleButton.Content>
                        <Image Width="28" Height="28" Source="/Images/FlipHorizontal.png">
                            <Image.RenderTransform>
                                <RotateTransform Angle="90"/>
                            </Image.RenderTransform>
                        </Image>
                    </ToggleButton.Content>
                </ToggleButton>
            </StackPanel>
        </StackPanel>
        </Border>
            </overlays:TogglableFlyout.Child>
        </overlays:TogglableFlyout>
        <zoombox:Zoombox
            Tag="{Binding ElementName=vpUc}"
            x:Name="zoombox"
            UseTouchGestures="{Binding UseTouchGestures, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=viewportControls:Viewport}, Mode=OneWay}"
            Scale="{Binding ZoomboxScale, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=viewportControls:Viewport}, Mode=OneWayToSource}"
            Center="{Binding Center, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=viewportControls:Viewport}, Mode=OneWayToSource}"
            Angle="{Binding Angle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=viewportControls:Viewport}, Mode=OneWayToSource}"
            RealDimensions="{Binding RealDimensions, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=viewportControls:Viewport}, Mode=OneWayToSource}"
            Dimensions="{Binding Dimensions, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=viewportControls:Viewport}, Mode=OneWayToSource}"
            ZoomMode="{Binding ZoomMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=viewportControls:Viewport}, Mode=TwoWay}"
            ZoomOutOnClick="{Binding ZoomOutOnClick, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=viewportControls:Viewport}, Mode=TwoWay}"
            FlipX="{Binding FlipX, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=viewportControls:Viewport}, Mode=TwoWay}"
            FlipY="{Binding FlipY, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=viewportControls:Viewport}, Mode=TwoWay}">
            <zoombox:Zoombox.AdditionalContent>
            <Border
                d:Width="64"
                d:Height="64"
                HorizontalAlignment="Center"
                VerticalAlignment="Center"
                DataContext="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=viewportControls:Viewport}}"
                RenderOptions.BitmapInterpolationMode="None">
                <Border.Background>
                    <!--TODO: Seems like DestinationRect of anything with size below and equal to 1 is tiling texture wrong-->
                    <!--Update: Seems like it depends on screen DPI and scaling, value of 2 also produces artifacts on high DPI device-->
                    <ImageBrush Source="/Images/CheckerTile.png" TileMode="Tile">
                        <ImageBrush.Transform>
                            <ScaleTransform ScaleX="0.5" ScaleY="0.5"/>
                        </ImageBrush.Transform>
                        <ImageBrush.DestinationRect>
                            <Binding Path="Scale" RelativeSource="{RelativeSource FindAncestor, AncestorType={x:Type zoombox:Zoombox}}"
                                     Converter="{converters:ZoomToViewportConverter}">
                                <Binding.ConverterParameter>
                                    <sys:Double>16</sys:Double>
                                </Binding.ConverterParameter>
                            </Binding>
                        </ImageBrush.DestinationRect>
                    </ImageBrush>
                </Border.Background>
                <Grid>
                    <Canvas
                        ZIndex="{Binding Document.ReferenceLayerViewModel.ShowHighest, Converter={converters:BoolToIntConverter}}"
                        IsHitTestVisible="{Binding Document.ReferenceLayerViewModel.IsTransforming}"
                        ui1:RenderOptionsBindable.BitmapInterpolationMode="{Binding ReferenceLayerScale, Converter={converters:ScaleToBitmapScalingModeConverter}}">
                        <visuals:SurfaceControl
                            Focusable="False"
                            Width="{Binding Document.ReferenceLayerViewModel.ReferenceBitmap.Size.X}"
                            Height="{Binding Document.ReferenceLayerViewModel.ReferenceBitmap.Size.Y}"
                            Surface="{Binding Document.ReferenceLayerViewModel.ReferenceBitmap, Mode=OneWay}"
                            IsVisible="{Binding Document.ReferenceLayerViewModel.IsVisibleBindable}"
                            RenderTransformOrigin="0, 0"
                            SizeChanged="OnReferenceImageSizeChanged"
                            FlowDirection="LeftToRight">
                            <visuals:SurfaceControl.RenderTransform>
                                <TransformGroup>
                                    <MatrixTransform
                                        Matrix="{Binding Document.ReferenceLayerViewModel.ReferenceTransformMatrix}" />
                                </TransformGroup>
                            </visuals:SurfaceControl.RenderTransform>
                            <visuals:SurfaceControl.Styles>
                                <!--TODO: Implement this-->
                                <!--<Style>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding Document.ReferenceLayerViewModel.ShowHighest, Mode=OneWay}" Value="True">
                                            <DataTrigger.EnterActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation
                                                            Storyboard.TargetProperty="(Button.Opacity)"
                                                            From="1" To="{x:Static subviews:ReferenceLayerViewModel.TopMostOpacity}" Duration="0:0:0.1" />
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </DataTrigger.EnterActions>
                                            <DataTrigger.ExitActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation
                                                            Storyboard.TargetProperty="(Button.Opacity)"
                                                            From="{x:Static subviews:ReferenceLayerViewModel.TopMostOpacity}" To="1" Duration="0:0:0.1" />
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </DataTrigger.ExitActions>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>-->
                            </visuals:SurfaceControl.Styles>
                        </visuals:SurfaceControl>
                        <Canvas.Styles>
                            <!--TODO: Implement this-->
                            <!--<Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Source={vm:ToolVM ColorPickerToolViewModel}, Path=PickFromReferenceLayer, Mode=OneWay}" Value="False">
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation
                                                        Storyboard.TargetProperty="(Button.Opacity)"
                                                        From="1" To="0" Duration="0:0:0.1" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.EnterActions>
                                        <DataTrigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation
                                                        Storyboard.TargetProperty="(Button.Opacity)"
                                                        From="0" To="1" Duration="0:0:0.1" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.ExitActions>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>-->
                        </Canvas.Styles>
                    </Canvas>
                    <ItemsControl ItemsSource="{Binding ActiveChunkSet}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <renderers:ChunkSetPanel
                                    ChunkCache="{Binding Document.RenderedChunks}"
                                    MaxSize="{Binding Document.SizeBindable}"
                                    Resolution="{Binding ActiveResolution}"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                 <renderers:ChunkControl
                        Chunk="{Binding Value}"
                        ChunkPosition="{Binding Key}"
                        ui1:RenderOptionsBindable.BitmapInterpolationMode="{Binding Zoombox.Scale, Converter={converters:ScaleToBitmapScalingModeConverter}}"
                        FlowDirection="LeftToRight">
                        <renderers:ChunkControl.Styles>
                            <!--TODO: Implement-->
                            <!--<Style>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Source={vm:ToolVM ColorPickerToolViewModel}, Path=PickOnlyFromReferenceLayer, Mode=OneWay}" Value="True">
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation
                                                        Storyboard.TargetProperty="(Button.Opacity)"
                                                        From="1" To="0" Duration="0:0:0.1" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.EnterActions>
                                        <DataTrigger.ExitActions>
                                            <BeginStoryboard>
                                                <Storyboard>
                                                    <DoubleAnimation
                                                        Storyboard.TargetProperty="(Button.Opacity)"
                                                        From="0" To="1" Duration="0:0:0.1" />
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </DataTrigger.ExitActions>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>-->
                        </renderers:ChunkControl.Styles>
                    </renderers:ChunkControl>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                    <Grid ZIndex="5">
                        <symmetryOverlay:SymmetryOverlay
                            Focusable="False"
                            IsHitTestVisible="{Binding ZoomMode, Converter={converters:ZoomModeToHitTestVisibleConverter}}"
                            ZoomboxScale="{Binding Zoombox.Scale}"
                            HorizontalAxisVisible="{Binding Document.HorizontalSymmetryAxisEnabledBindable}"
                            VerticalAxisVisible="{Binding Document.VerticalSymmetryAxisEnabledBindable}"
                            HorizontalAxisY="{Binding Document.HorizontalSymmetryAxisYBindable, Mode=OneWay}"
                            VerticalAxisX="{Binding Document.VerticalSymmetryAxisXBindable, Mode=OneWay}"
                            DragCommand="{xaml:Command PixiEditor.Document.DragSymmetry, UseProvided=True}"
                            DragEndCommand="{xaml:Command PixiEditor.Document.EndDragSymmetry, UseProvided=True}"
                            DragStartCommand="{xaml:Command PixiEditor.Document.StartDragSymmetry, UseProvided=True}"
                            FlowDirection="LeftToRight" />
                        <selectionOverlay:SelectionOverlay
                            Focusable="False"
                            ShowFill="{Binding ToolsSubViewModel.ActiveTool, Source={viewModels:MainVM}, Converter={converters:IsSelectionToolConverter}}"
                            Path="{Binding Document.SelectionPathBindable}"
                            ZoomboxScale="{Binding Zoombox.Scale}"
                            FlowDirection="LeftToRight" />
                        <brushShapeOverlay:BrushShapeOverlay
                            Focusable="False"
                            IsHitTestVisible="False"
                            IsVisible="{Binding !Document.TransformViewModel.TransformActive}"
                            ZoomboxScale="{Binding Zoombox.Scale}"
                            MouseEventSource="{Binding Zoombox.Tag.BackgroundGrid, Mode=OneTime}"
                            MouseReference="{Binding Zoombox.Tag.MainImage, Mode=OneTime}"
                            BrushSize="{Binding ToolsSubViewModel.ActiveBasicToolbar.ToolSize, Source={viewModels:MainVM}}"
                            BrushShape="{Binding ToolsSubViewModel.ActiveTool.BrushShape, Source={viewModels:MainVM}, FallbackValue={x:Static brushShapeOverlay:BrushShape.Hidden}}"
                            FlowDirection="LeftToRight"/>
                        <transformOverlay:TransformOverlay
                            Focusable="False"
                            Cursor="Arrow"
                            IsHitTestVisible="{Binding ZoomMode, Converter={converters:ZoomModeToHitTestVisibleConverter}}"
                            HorizontalAlignment="Stretch"
                            VerticalAlignment="Stretch"
                            IsVisible="{Binding Document.TransformViewModel.TransformActive}"
                            ActionCompleted="{Binding Document.TransformViewModel.ActionCompletedCommand}"
                            Corners="{Binding Document.TransformViewModel.Corners, Mode=TwoWay}"
                            RequestedCorners="{Binding Document.TransformViewModel.RequestedCorners, Mode=TwoWay}"
                            CornerFreedom="{Binding Document.TransformViewModel.CornerFreedom}"
                            SideFreedom="{Binding Document.TransformViewModel.SideFreedom}"
                            LockRotation="{Binding Document.TransformViewModel.LockRotation}"
                            CoverWholeScreen="{Binding Document.TransformViewModel.CoverWholeScreen}"
                            SnapToAngles="{Binding Document.TransformViewModel.SnapToAngles}"
                            InternalState="{Binding Document.TransformViewModel.InternalState, Mode=TwoWay}"
                            ZoomboxScale="{Binding Zoombox.Scale}"
                            ZoomboxAngle="{Binding Zoombox.Angle}" />
                        <lineToolOverlay:LineToolOverlay
                            Focusable="False"
                            IsVisible="{Binding Document.LineToolOverlayViewModel.IsEnabled}"
                            ActionCompleted="{Binding Document.LineToolOverlayViewModel.ActionCompletedCommand}"
                            LineStart="{Binding Document.LineToolOverlayViewModel.LineStart, Mode=TwoWay}"
                            LineEnd="{Binding Document.LineToolOverlayViewModel.LineEnd, Mode=TwoWay}"
                            ZoomboxScale="{Binding Zoombox.Scale}"
                            FlowDirection="LeftToRight"/>
                    </Grid>
                    <Grid IsHitTestVisible="False"
                        ShowGridLines="True" Width="{Binding Document.Width}" Height="{Binding Document.Height}" Panel.ZIndex="10"
                        IsVisible="{Binding GridLinesVisible, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=viewportControls:Viewport}}">
                        <Grid.Resources>
                            <converters:ThresholdVisibilityConverter Threshold="10" x:Key="ThresholdVisibilityConverter"/>
                        </Grid.Resources>
                        <visuals:GridLines Scale="{Binding Zoombox.Scale}" IsVisible="{Binding Zoombox.Scale, Converter={StaticResource ThresholdVisibilityConverter}}"
                                           Rows="{Binding Document.Width}" Columns="{Binding Document.Height}"/>
                    </Grid>
                    <Rectangle Stroke="{DynamicResource ThemeBackgroundBrush1}" Opacity=".8" ZIndex="2"
                               IsVisible="{Binding Document.ReferenceLayerViewModel.IsVisibleBindable}">
                        <Rectangle.StrokeThickness>
                            <Binding Converter="{converters:ReciprocalConverter}">
                                <Binding.Path>Zoombox.Scale</Binding.Path>
                                <Binding.ConverterParameter>
                                    <sys:Double>
                                        3
                                    </sys:Double>
                                </Binding.ConverterParameter>
                            </Binding>
                        </Rectangle.StrokeThickness>
                        <Rectangle.Margin>
                            <Binding Converter="{converters:ReciprocalConverter}">
                                <Binding.Path>Zoombox.Scale</Binding.Path>
                                <Binding.ConverterParameter>
                                    <sys:Double>
                                        -3
                                    </sys:Double>
                                </Binding.ConverterParameter>
                            </Binding>
                        </Rectangle.Margin>
                    </Rectangle>
                </Grid>
            </Border>
                </zoombox:Zoombox.AdditionalContent>
        </zoombox:Zoombox>
        <Button 
            ZIndex="99999"
            DockPanel.Dock="Bottom"
            Margin="5"
            Padding="8,5,5,5"
            VerticalAlignment="Bottom" 
            HorizontalAlignment="Center"
            Classes="GrayRoundButton"
            Command="{xaml:Command PixiEditor.Tools.ApplyTransform}">
            <Button.IsVisible>
                <MultiBinding Converter="{converters:BoolOrToVisibilityConverter}">
                    <MultiBinding.Bindings>
                        <Binding ElementName="vpUc" Path="Document.TransformViewModel.ShowTransformControls"/>
                        <Binding ElementName="vpUc" Path="Document.LineToolOverlayViewModel.IsEnabled"/>
                    </MultiBinding.Bindings>
                </MultiBinding>
            </Button.IsVisible>
            <StackPanel Orientation="Horizontal">
                <TextBlock ui:Translator.Key="APPLY_TRANSFORM" VerticalAlignment="Center" Margin="0,0,5,0" />
                <Border Padding="10,3" CornerRadius="5" Background="{DynamicResource ThemeAccentBrush}" IsVisible="{xaml:ShortcutBinding PixiEditor.Tools.ApplyTransform, Converter={converters:NotNullToVisibilityConverter}}">
                    <TextBlock Text="{xaml:ShortcutBinding PixiEditor.Tools.ApplyTransform}" />
                </Border>
            </StackPanel>
        </Button>
    </Grid>
</UserControl>
